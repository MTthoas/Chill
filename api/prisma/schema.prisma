// Schéma Prisma pour la structure demandée

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Season {
  id             Int          @id @default(autoincrement())
  special_id     String       @unique // correspond à l'id externe, ex: sr:season:126393
  name           String
  start_date     DateTime
  end_date       DateTime
  year           String
  competition_id String
  competitors    Competitor[]
  upcomingMatches UpcomingMatch[]
}

model Competitor {
  id           Int          @id @default(autoincrement())
  special_id   String       @unique // correspond à l'id externe, ex: sr:competitor:1644
  name         String
  short_name   String
  abbreviation String
  gender       String
  country      String?
  country_code String?
  logo         String?      // URL du logo de l'équipe
  season       Season       @relation(fields: [seasonId], references: [id])
  seasonId     Int
  players      Player[]
  statistics   Statistique[]
  competitorStatsAdvices CompetitorStatsAdvice[]
  homeMatches  UpcomingMatch[] @relation("HomeMatches")
  awayMatches  UpcomingMatch[] @relation("AwayMatches")
}

model Player {
  id           Int         @id @default(autoincrement())
  special_id   String      @unique // correspond à l'id externe, ex: sr:player:155995
  name         String
  competitor   Competitor  @relation(fields: [competitorId], references: [id])
  competitorId Int
  statistics   PlayerStatistique[]
  playerStatsAIAdvices PlayerStatsAIAdvice[]
}

model Statistique {
  id           Int         @id @default(autoincrement())
  type         String
  value        Float
  competitor   Competitor  @relation(fields: [competitorId], references: [id])
  competitorId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PlayerStatistique {
  id           Int         @id @default(autoincrement())
  type         String
  value        Float
  player       Player      @relation(fields: [playerId], references: [id])
  playerId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PlayerStatsAIAdvice {
  id         Int      @id @default(autoincrement())
  player     Player   @relation(fields: [playerId], references: [id])
  playerId   Int
  advice     String
  created_at DateTime @default(now())
}

model CompetitorStatsAdvice {
  id           Int         @id @default(autoincrement())
  competitor   Competitor  @relation(fields: [competitorId], references: [id])
  competitorId Int
  advice       String
  order        String      // "buy" ou "sell"
  created_at   DateTime    @default(now())
}

model UpcomingMatch {
  id                Int         @id @default(autoincrement())
  special_id        String      @unique // sr:match:xxxxx
  home_competitor   Competitor  @relation("HomeMatches", fields: [homeCompetitorId], references: [id])
  homeCompetitorId  Int
  away_competitor   Competitor  @relation("AwayMatches", fields: [awayCompetitorId], references: [id])
  awayCompetitorId  Int
  season            Season      @relation(fields: [seasonId], references: [id])
  seasonId          Int
  start_time        DateTime
  venue             String?
  status            String      @default("scheduled")
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}