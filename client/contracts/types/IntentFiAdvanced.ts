/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IntentFiAdvanced {
  export type DCAParamsStruct = {
    investmentAmount: BigNumberish;
    intervalSeconds: BigNumberish;
    totalPeriods: BigNumberish;
    targetToken: AddressLike;
    slippageTolerance: BigNumberish;
  };

  export type DCAParamsStructOutput = [
    investmentAmount: bigint,
    intervalSeconds: bigint,
    totalPeriods: bigint,
    targetToken: string,
    slippageTolerance: bigint
  ] & {
    investmentAmount: bigint;
    intervalSeconds: bigint;
    totalPeriods: bigint;
    targetToken: string;
    slippageTolerance: bigint;
  };

  export type RangeParamsStruct = {
    buyPrice: BigNumberish;
    sellPrice: BigNumberish;
    tradeAmount: BigNumberish;
    maxTrades: BigNumberish;
  };

  export type RangeParamsStructOutput = [
    buyPrice: bigint,
    sellPrice: bigint,
    tradeAmount: bigint,
    maxTrades: bigint
  ] & {
    buyPrice: bigint;
    sellPrice: bigint;
    tradeAmount: bigint;
    maxTrades: bigint;
  };

  export type YieldParamsStruct = {
    yieldProtocol: AddressLike;
    minYield: BigNumberish;
    stakingAmount: BigNumberish;
    compoundFrequency: BigNumberish;
  };

  export type YieldParamsStructOutput = [
    yieldProtocol: string,
    minYield: bigint,
    stakingAmount: bigint,
    compoundFrequency: bigint
  ] & {
    yieldProtocol: string;
    minYield: bigint;
    stakingAmount: bigint;
    compoundFrequency: bigint;
  };

  export type AdvancedIntentStruct = {
    id: BigNumberish;
    user: AddressLike;
    advancedType: BigNumberish;
    triggerPrice: BigNumberish;
    upperBound: BigNumberish;
    lowerBound: BigNumberish;
    amount: BigNumberish;
    frequency: BigNumberish;
    lastExecution: BigNumberish;
    maxExecutions: BigNumberish;
    executionCount: BigNumberish;
    tokenAddress: AddressLike;
    destinationChainSelector: BigNumberish;
    destinationReceiver: AddressLike;
    isActive: boolean;
    extraData: BytesLike;
  };

  export type AdvancedIntentStructOutput = [
    id: bigint,
    user: string,
    advancedType: bigint,
    triggerPrice: bigint,
    upperBound: bigint,
    lowerBound: bigint,
    amount: bigint,
    frequency: bigint,
    lastExecution: bigint,
    maxExecutions: bigint,
    executionCount: bigint,
    tokenAddress: string,
    destinationChainSelector: bigint,
    destinationReceiver: string,
    isActive: boolean,
    extraData: string
  ] & {
    id: bigint;
    user: string;
    advancedType: bigint;
    triggerPrice: bigint;
    upperBound: bigint;
    lowerBound: bigint;
    amount: bigint;
    frequency: bigint;
    lastExecution: bigint;
    maxExecutions: bigint;
    executionCount: bigint;
    tokenAddress: string;
    destinationChainSelector: bigint;
    destinationReceiver: string;
    isActive: boolean;
    extraData: string;
  };
}

export declare namespace IntentFi {
  export type IntentStruct = {
    id: BigNumberish;
    owner: AddressLike;
    intentType: BigNumberish;
    triggerPrice: BigNumberish;
    amount: BigNumberish;
    tokenAddress: AddressLike;
    destinationChainSelector: BigNumberish;
    destinationReceiver: AddressLike;
    status: BigNumberish;
    createdAt: BigNumberish;
    lastChecked: BigNumberish;
  };

  export type IntentStructOutput = [
    id: bigint,
    owner: string,
    intentType: bigint,
    triggerPrice: bigint,
    amount: bigint,
    tokenAddress: string,
    destinationChainSelector: bigint,
    destinationReceiver: string,
    status: bigint,
    createdAt: bigint,
    lastChecked: bigint
  ] & {
    id: bigint;
    owner: string;
    intentType: bigint;
    triggerPrice: bigint;
    amount: bigint;
    tokenAddress: string;
    destinationChainSelector: bigint;
    destinationReceiver: string;
    status: bigint;
    createdAt: bigint;
    lastChecked: bigint;
  };
}

export interface IntentFiAdvancedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_INTENTS_PER_CHECK"
      | "MAX_SLIPPAGE"
      | "PRICE_FEED_HEARTBEAT"
      | "advancedIntents"
      | "allowlistDestinationChain"
      | "allowlistedDestinationChains"
      | "cancelAdvancedIntent"
      | "cancelIntent"
      | "ccipRouterAddress"
      | "checkUpkeep"
      | "createDCAIntent"
      | "createIntent"
      | "createRangeIntent"
      | "createYieldIntent"
      | "executeDCAIntent"
      | "executeIntent"
      | "executeRangeIntent"
      | "fundLINK"
      | "getActiveIntents"
      | "getAdvancedIntentDetails"
      | "getCCIPRouter"
      | "getCurrentPrice"
      | "getIntentDetails"
      | "getLINKBalance"
      | "getLINKToken"
      | "getUserAdvancedIntents"
      | "getUserIntents"
      | "intents"
      | "isTokenSupported"
      | "nextAdvancedIntentId"
      | "owner"
      | "pauseAdvancedIntents"
      | "performUpkeep"
      | "renounceOwnership"
      | "setSupportedToken"
      | "setSupportedYieldProtocol"
      | "supportedYieldProtocols"
      | "transferOwnership"
      | "updateCCIPRouter"
      | "updatePriceFeed"
      | "userAdvancedIntents"
      | "userIntents"
      | "withdraw"
      | "withdrawLINK"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdvancedIntentCreated"
      | "CCIPMessageSent"
      | "CrossChainMessageSent"
      | "DCAExecuted"
      | "IntentCancelled"
      | "IntentCreated"
      | "IntentExecuted"
      | "OwnershipTransferred"
      | "RangeTradeExecuted"
      | "YieldHarvested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_INTENTS_PER_CHECK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SLIPPAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_FEED_HEARTBEAT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advancedIntents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistDestinationChain",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedDestinationChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAdvancedIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDCAIntent",
    values: [IntentFiAdvanced.DCAParamsStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIntent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRangeIntent",
    values: [IntentFiAdvanced.RangeParamsStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createYieldIntent",
    values: [IntentFiAdvanced.YieldParamsStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDCAIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRangeIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundLINK",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveIntents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedIntentDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCCIPRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIntentDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLINKBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLINKToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAdvancedIntents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIntents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "intents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAdvancedIntentId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAdvancedIntents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedYieldProtocol",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedYieldProtocols",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCCIPRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAdvancedIntents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userIntents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLINK",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_INTENTS_PER_CHECK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SLIPPAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_FEED_HEARTBEAT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advancedIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistDestinationChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedDestinationChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAdvancedIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDCAIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRangeIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createYieldIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDCAIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRangeIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundLINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedIntentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCCIPRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLINKBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLINKToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAdvancedIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAdvancedIntentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAdvancedIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedYieldProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedYieldProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCCIPRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAdvancedIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLINK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace AdvancedIntentCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    advancedType: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    advancedType: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    advancedType: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CCIPMessageSentEvent {
  export type InputTuple = [
    messageId: BytesLike,
    destinationChainSelector: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    messageId: string,
    destinationChainSelector: bigint,
    receiver: string,
    amount: bigint,
    token: string
  ];
  export interface OutputObject {
    messageId: string;
    destinationChainSelector: bigint;
    receiver: string;
    amount: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainMessageSentEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    destinationChainSelector: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    intentId: bigint,
    destinationChainSelector: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    intentId: bigint;
    destinationChainSelector: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DCAExecutedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    executionNumber: BigNumberish,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    intentId: bigint,
    executionNumber: bigint,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    intentId: bigint;
    executionNumber: bigint;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentCancelledEvent {
  export type InputTuple = [intentId: BigNumberish];
  export type OutputTuple = [intentId: bigint];
  export interface OutputObject {
    intentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentCreatedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    owner: AddressLike,
    intentType: BigNumberish,
    triggerPrice: BigNumberish,
    amount: BigNumberish,
    destinationChain: BigNumberish,
    destinationReceiver: AddressLike
  ];
  export type OutputTuple = [
    intentId: bigint,
    owner: string,
    intentType: bigint,
    triggerPrice: bigint,
    amount: bigint,
    destinationChain: bigint,
    destinationReceiver: string
  ];
  export interface OutputObject {
    intentId: bigint;
    owner: string;
    intentType: bigint;
    triggerPrice: bigint;
    amount: bigint;
    destinationChain: bigint;
    destinationReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentExecutedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    destinationChainSelector: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    intentId: bigint,
    destinationChainSelector: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    intentId: bigint;
    destinationChainSelector: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RangeTradeExecutedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    isBuy: boolean,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    intentId: bigint,
    isBuy: boolean,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    intentId: bigint;
    isBuy: boolean;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldHarvestedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    yield_: BigNumberish,
    protocol: AddressLike
  ];
  export type OutputTuple = [
    intentId: bigint,
    yield_: bigint,
    protocol: string
  ];
  export interface OutputObject {
    intentId: bigint;
    yield: bigint;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntentFiAdvanced extends BaseContract {
  connect(runner?: ContractRunner | null): IntentFiAdvanced;
  waitForDeployment(): Promise<this>;

  interface: IntentFiAdvancedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_INTENTS_PER_CHECK: TypedContractMethod<[], [bigint], "view">;

  MAX_SLIPPAGE: TypedContractMethod<[], [bigint], "view">;

  PRICE_FEED_HEARTBEAT: TypedContractMethod<[], [bigint], "view">;

  advancedIntents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        boolean,
        string
      ] & {
        id: bigint;
        user: string;
        advancedType: bigint;
        triggerPrice: bigint;
        upperBound: bigint;
        lowerBound: bigint;
        amount: bigint;
        frequency: bigint;
        lastExecution: bigint;
        maxExecutions: bigint;
        executionCount: bigint;
        tokenAddress: string;
        destinationChainSelector: bigint;
        destinationReceiver: string;
        isActive: boolean;
        extraData: string;
      }
    ],
    "view"
  >;

  allowlistDestinationChain: TypedContractMethod<
    [_destinationChainSelector: BigNumberish, allowed: boolean],
    [void],
    "nonpayable"
  >;

  allowlistedDestinationChains: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  cancelAdvancedIntent: TypedContractMethod<
    [intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelIntent: TypedContractMethod<
    [_intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  ccipRouterAddress: TypedContractMethod<[], [string], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  createDCAIntent: TypedContractMethod<
    [
      params: IntentFiAdvanced.DCAParamsStruct,
      destinationChain: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  createIntent: TypedContractMethod<
    [
      _intentType: BigNumberish,
      _triggerPrice: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike,
      _destinationChainSelector: BigNumberish,
      _destinationReceiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  createRangeIntent: TypedContractMethod<
    [
      params: IntentFiAdvanced.RangeParamsStruct,
      destinationChain: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  createYieldIntent: TypedContractMethod<
    [
      params: IntentFiAdvanced.YieldParamsStruct,
      destinationChain: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  executeDCAIntent: TypedContractMethod<
    [intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeIntent: TypedContractMethod<
    [_intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeRangeIntent: TypedContractMethod<
    [intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundLINK: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getActiveIntents: TypedContractMethod<[], [bigint[]], "view">;

  getAdvancedIntentDetails: TypedContractMethod<
    [intentId: BigNumberish],
    [IntentFiAdvanced.AdvancedIntentStructOutput],
    "view"
  >;

  getCCIPRouter: TypedContractMethod<[], [string], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getIntentDetails: TypedContractMethod<
    [_intentId: BigNumberish],
    [IntentFi.IntentStructOutput],
    "view"
  >;

  getLINKBalance: TypedContractMethod<[], [bigint], "view">;

  getLINKToken: TypedContractMethod<[], [string], "view">;

  getUserAdvancedIntents: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserIntents: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  intents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        owner: string;
        intentType: bigint;
        triggerPrice: bigint;
        amount: bigint;
        tokenAddress: string;
        destinationChainSelector: bigint;
        destinationReceiver: string;
        status: bigint;
        createdAt: bigint;
        lastChecked: bigint;
      }
    ],
    "view"
  >;

  isTokenSupported: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  nextAdvancedIntentId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pauseAdvancedIntents: TypedContractMethod<[], [void], "nonpayable">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setSupportedToken: TypedContractMethod<
    [_token: AddressLike, _supported: boolean],
    [void],
    "nonpayable"
  >;

  setSupportedYieldProtocol: TypedContractMethod<
    [protocol: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  supportedYieldProtocols: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCCIPRouter: TypedContractMethod<
    [_newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceFeed: TypedContractMethod<
    [_newPriceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  userAdvancedIntents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userIntents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawLINK: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_INTENTS_PER_CHECK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SLIPPAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_FEED_HEARTBEAT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "advancedIntents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        boolean,
        string
      ] & {
        id: bigint;
        user: string;
        advancedType: bigint;
        triggerPrice: bigint;
        upperBound: bigint;
        lowerBound: bigint;
        amount: bigint;
        frequency: bigint;
        lastExecution: bigint;
        maxExecutions: bigint;
        executionCount: bigint;
        tokenAddress: string;
        destinationChainSelector: bigint;
        destinationReceiver: string;
        isActive: boolean;
        extraData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowlistDestinationChain"
  ): TypedContractMethod<
    [_destinationChainSelector: BigNumberish, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowlistedDestinationChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelAdvancedIntent"
  ): TypedContractMethod<[intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelIntent"
  ): TypedContractMethod<[_intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ccipRouterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDCAIntent"
  ): TypedContractMethod<
    [
      params: IntentFiAdvanced.DCAParamsStruct,
      destinationChain: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIntent"
  ): TypedContractMethod<
    [
      _intentType: BigNumberish,
      _triggerPrice: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike,
      _destinationChainSelector: BigNumberish,
      _destinationReceiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createRangeIntent"
  ): TypedContractMethod<
    [
      params: IntentFiAdvanced.RangeParamsStruct,
      destinationChain: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createYieldIntent"
  ): TypedContractMethod<
    [
      params: IntentFiAdvanced.YieldParamsStruct,
      destinationChain: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeDCAIntent"
  ): TypedContractMethod<[intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeIntent"
  ): TypedContractMethod<[_intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeRangeIntent"
  ): TypedContractMethod<[intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundLINK"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveIntents"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAdvancedIntentDetails"
  ): TypedContractMethod<
    [intentId: BigNumberish],
    [IntentFiAdvanced.AdvancedIntentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCCIPRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIntentDetails"
  ): TypedContractMethod<
    [_intentId: BigNumberish],
    [IntentFi.IntentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLINKBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLINKToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserAdvancedIntents"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserIntents"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "intents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        owner: string;
        intentType: bigint;
        triggerPrice: bigint;
        amount: bigint;
        tokenAddress: string;
        destinationChainSelector: bigint;
        destinationReceiver: string;
        status: bigint;
        createdAt: bigint;
        lastChecked: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenSupported"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextAdvancedIntentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseAdvancedIntents"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupportedToken"
  ): TypedContractMethod<
    [_token: AddressLike, _supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedYieldProtocol"
  ): TypedContractMethod<
    [protocol: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedYieldProtocols"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCCIPRouter"
  ): TypedContractMethod<[_newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<[_newPriceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAdvancedIntents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userIntents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawLINK"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdvancedIntentCreated"
  ): TypedContractEvent<
    AdvancedIntentCreatedEvent.InputTuple,
    AdvancedIntentCreatedEvent.OutputTuple,
    AdvancedIntentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CCIPMessageSent"
  ): TypedContractEvent<
    CCIPMessageSentEvent.InputTuple,
    CCIPMessageSentEvent.OutputTuple,
    CCIPMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainMessageSent"
  ): TypedContractEvent<
    CrossChainMessageSentEvent.InputTuple,
    CrossChainMessageSentEvent.OutputTuple,
    CrossChainMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "DCAExecuted"
  ): TypedContractEvent<
    DCAExecutedEvent.InputTuple,
    DCAExecutedEvent.OutputTuple,
    DCAExecutedEvent.OutputObject
  >;
  getEvent(
    key: "IntentCancelled"
  ): TypedContractEvent<
    IntentCancelledEvent.InputTuple,
    IntentCancelledEvent.OutputTuple,
    IntentCancelledEvent.OutputObject
  >;
  getEvent(
    key: "IntentCreated"
  ): TypedContractEvent<
    IntentCreatedEvent.InputTuple,
    IntentCreatedEvent.OutputTuple,
    IntentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IntentExecuted"
  ): TypedContractEvent<
    IntentExecutedEvent.InputTuple,
    IntentExecutedEvent.OutputTuple,
    IntentExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RangeTradeExecuted"
  ): TypedContractEvent<
    RangeTradeExecutedEvent.InputTuple,
    RangeTradeExecutedEvent.OutputTuple,
    RangeTradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "YieldHarvested"
  ): TypedContractEvent<
    YieldHarvestedEvent.InputTuple,
    YieldHarvestedEvent.OutputTuple,
    YieldHarvestedEvent.OutputObject
  >;

  filters: {
    "AdvancedIntentCreated(uint256,address,uint8,uint256)": TypedContractEvent<
      AdvancedIntentCreatedEvent.InputTuple,
      AdvancedIntentCreatedEvent.OutputTuple,
      AdvancedIntentCreatedEvent.OutputObject
    >;
    AdvancedIntentCreated: TypedContractEvent<
      AdvancedIntentCreatedEvent.InputTuple,
      AdvancedIntentCreatedEvent.OutputTuple,
      AdvancedIntentCreatedEvent.OutputObject
    >;

    "CCIPMessageSent(bytes32,uint64,address,uint256,address)": TypedContractEvent<
      CCIPMessageSentEvent.InputTuple,
      CCIPMessageSentEvent.OutputTuple,
      CCIPMessageSentEvent.OutputObject
    >;
    CCIPMessageSent: TypedContractEvent<
      CCIPMessageSentEvent.InputTuple,
      CCIPMessageSentEvent.OutputTuple,
      CCIPMessageSentEvent.OutputObject
    >;

    "CrossChainMessageSent(uint256,uint64,address,uint256)": TypedContractEvent<
      CrossChainMessageSentEvent.InputTuple,
      CrossChainMessageSentEvent.OutputTuple,
      CrossChainMessageSentEvent.OutputObject
    >;
    CrossChainMessageSent: TypedContractEvent<
      CrossChainMessageSentEvent.InputTuple,
      CrossChainMessageSentEvent.OutputTuple,
      CrossChainMessageSentEvent.OutputObject
    >;

    "DCAExecuted(uint256,uint256,uint256,int256)": TypedContractEvent<
      DCAExecutedEvent.InputTuple,
      DCAExecutedEvent.OutputTuple,
      DCAExecutedEvent.OutputObject
    >;
    DCAExecuted: TypedContractEvent<
      DCAExecutedEvent.InputTuple,
      DCAExecutedEvent.OutputTuple,
      DCAExecutedEvent.OutputObject
    >;

    "IntentCancelled(uint256)": TypedContractEvent<
      IntentCancelledEvent.InputTuple,
      IntentCancelledEvent.OutputTuple,
      IntentCancelledEvent.OutputObject
    >;
    IntentCancelled: TypedContractEvent<
      IntentCancelledEvent.InputTuple,
      IntentCancelledEvent.OutputTuple,
      IntentCancelledEvent.OutputObject
    >;

    "IntentCreated(uint256,address,uint8,int256,uint256,uint64,address)": TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;
    IntentCreated: TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;

    "IntentExecuted(uint256,uint64,address,uint256)": TypedContractEvent<
      IntentExecutedEvent.InputTuple,
      IntentExecutedEvent.OutputTuple,
      IntentExecutedEvent.OutputObject
    >;
    IntentExecuted: TypedContractEvent<
      IntentExecutedEvent.InputTuple,
      IntentExecutedEvent.OutputTuple,
      IntentExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RangeTradeExecuted(uint256,bool,uint256,int256)": TypedContractEvent<
      RangeTradeExecutedEvent.InputTuple,
      RangeTradeExecutedEvent.OutputTuple,
      RangeTradeExecutedEvent.OutputObject
    >;
    RangeTradeExecuted: TypedContractEvent<
      RangeTradeExecutedEvent.InputTuple,
      RangeTradeExecutedEvent.OutputTuple,
      RangeTradeExecutedEvent.OutputObject
    >;

    "YieldHarvested(uint256,uint256,address)": TypedContractEvent<
      YieldHarvestedEvent.InputTuple,
      YieldHarvestedEvent.OutputTuple,
      YieldHarvestedEvent.OutputObject
    >;
    YieldHarvested: TypedContractEvent<
      YieldHarvestedEvent.InputTuple,
      YieldHarvestedEvent.OutputTuple,
      YieldHarvestedEvent.OutputObject
    >;
  };
}
