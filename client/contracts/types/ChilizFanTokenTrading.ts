/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ChilizFanTokenTrading {
  export type FanTokenInfoStruct = {
    tokenAddress: AddressLike;
    name: string;
    symbol: string;
    buyPrice: BigNumberish;
    sellPrice: BigNumberish;
    isActive: boolean;
    minTradeAmount: BigNumberish;
  };

  export type FanTokenInfoStructOutput = [
    tokenAddress: string,
    name: string,
    symbol: string,
    buyPrice: bigint,
    sellPrice: bigint,
    isActive: boolean,
    minTradeAmount: bigint
  ] & {
    tokenAddress: string;
    name: string;
    symbol: string;
    buyPrice: bigint;
    sellPrice: bigint;
    isActive: boolean;
    minTradeAmount: bigint;
  };
}

export interface ChilizFanTokenTradingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFanToken"
      | "addLiquidity"
      | "buyFanTokens"
      | "emergencyWithdraw"
      | "getBuyPrice"
      | "getFanTokenInfo"
      | "getSellPrice"
      | "getSupportedTokens"
      | "getTokenReserves"
      | "pause"
      | "removeLiquidity"
      | "sellFanTokens"
      | "setTokenActive"
      | "setTradingFee"
      | "unpause"
      | "updateTokenPrices"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FanTokenAdded"
      | "FanTokenUpdated"
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "TokensPurchased"
      | "TokensSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFanToken",
    values: [
      AddressLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFanTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFanTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenReserves",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFanTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenActive",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTokenPrices",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFanToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFanTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFanTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFanTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace FanTokenAddedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    name: string,
    buyPrice: BigNumberish,
    sellPrice: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    name: string,
    buyPrice: bigint,
    sellPrice: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    name: string;
    buyPrice: bigint;
    sellPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FanTokenUpdatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    newBuyPrice: BigNumberish,
    newSellPrice: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    newBuyPrice: bigint,
    newSellPrice: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    newBuyPrice: bigint;
    newSellPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [tokenAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [tokenAddress: string, amount: bigint];
  export interface OutputObject {
    tokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [tokenAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [tokenAddress: string, amount: bigint];
  export interface OutputObject {
    tokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    tokenAddress: AddressLike,
    tokenAmount: BigNumberish,
    chzPaid: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    tokenAddress: string,
    tokenAmount: bigint,
    chzPaid: bigint
  ];
  export interface OutputObject {
    buyer: string;
    tokenAddress: string;
    tokenAmount: bigint;
    chzPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensSoldEvent {
  export type InputTuple = [
    seller: AddressLike,
    tokenAddress: AddressLike,
    tokenAmount: BigNumberish,
    chzReceived: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    tokenAddress: string,
    tokenAmount: bigint,
    chzReceived: bigint
  ];
  export interface OutputObject {
    seller: string;
    tokenAddress: string;
    tokenAmount: bigint;
    chzReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChilizFanTokenTrading extends BaseContract {
  connect(runner?: ContractRunner | null): ChilizFanTokenTrading;
  waitForDeployment(): Promise<this>;

  interface: ChilizFanTokenTradingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFanToken: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _name: string,
      _symbol: string,
      _buyPrice: BigNumberish,
      _sellPrice: BigNumberish,
      _minTradeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyFanTokens: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getBuyPrice: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getFanTokenInfo: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [ChilizFanTokenTrading.FanTokenInfoStructOutput],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<[], [string[]], "view">;

  getTokenReserves: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  removeLiquidity: TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sellFanTokens: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenActive: TypedContractMethod<
    [_tokenAddress: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setTradingFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateTokenPrices: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _newBuyPrice: BigNumberish,
      _newSellPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFanToken"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _name: string,
      _symbol: string,
      _buyPrice: BigNumberish,
      _sellPrice: BigNumberish,
      _minTradeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyFanTokens"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFanTokenInfo"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike],
    [ChilizFanTokenTrading.FanTokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenReserves"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellFanTokens"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenActive"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTradingFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenPrices"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _newBuyPrice: BigNumberish,
      _newSellPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FanTokenAdded"
  ): TypedContractEvent<
    FanTokenAddedEvent.InputTuple,
    FanTokenAddedEvent.OutputTuple,
    FanTokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "FanTokenUpdated"
  ): TypedContractEvent<
    FanTokenUpdatedEvent.InputTuple,
    FanTokenUpdatedEvent.OutputTuple,
    FanTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "TokensSold"
  ): TypedContractEvent<
    TokensSoldEvent.InputTuple,
    TokensSoldEvent.OutputTuple,
    TokensSoldEvent.OutputObject
  >;

  filters: {
    "FanTokenAdded(address,string,uint256,uint256)": TypedContractEvent<
      FanTokenAddedEvent.InputTuple,
      FanTokenAddedEvent.OutputTuple,
      FanTokenAddedEvent.OutputObject
    >;
    FanTokenAdded: TypedContractEvent<
      FanTokenAddedEvent.InputTuple,
      FanTokenAddedEvent.OutputTuple,
      FanTokenAddedEvent.OutputObject
    >;

    "FanTokenUpdated(address,uint256,uint256)": TypedContractEvent<
      FanTokenUpdatedEvent.InputTuple,
      FanTokenUpdatedEvent.OutputTuple,
      FanTokenUpdatedEvent.OutputObject
    >;
    FanTokenUpdated: TypedContractEvent<
      FanTokenUpdatedEvent.InputTuple,
      FanTokenUpdatedEvent.OutputTuple,
      FanTokenUpdatedEvent.OutputObject
    >;

    "LiquidityAdded(address,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(address,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "TokensPurchased(address,address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;

    "TokensSold(address,address,uint256,uint256)": TypedContractEvent<
      TokensSoldEvent.InputTuple,
      TokensSoldEvent.OutputTuple,
      TokensSoldEvent.OutputObject
    >;
    TokensSold: TypedContractEvent<
      TokensSoldEvent.InputTuple,
      TokensSoldEvent.OutputTuple,
      TokensSoldEvent.OutputObject
    >;
  };
}
