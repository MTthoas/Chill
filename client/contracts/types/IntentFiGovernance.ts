/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IntentFiGovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelProposal"
      | "castVote"
      | "delegate"
      | "delegatedVotes"
      | "delegates"
      | "emergencyMultisig"
      | "emergencyPause"
      | "emergencyThreshold"
      | "emergencyUnpause"
      | "executeProposal"
      | "getProposalDetails"
      | "getUserVote"
      | "getVotingPower"
      | "governanceParams"
      | "governanceToken"
      | "nextProposalId"
      | "owner"
      | "proposalExecutionTime"
      | "proposals"
      | "propose"
      | "protocolParams"
      | "renounceOwnership"
      | "transferOwnership"
      | "votingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyPauseToggled"
      | "OwnershipTransferred"
      | "ParameterUpdated"
      | "ProposalCancelled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMultisig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalExecutionTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, string, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalExecutionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
}

export namespace EmergencyPauseToggledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParameterUpdatedEvent {
  export type InputTuple = [
    parameter: string,
    oldValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [
    parameter: string,
    oldValue: bigint,
    newValue: bigint
  ];
  export interface OutputObject {
    parameter: string;
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCancelledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    title: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    title: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    title: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: boolean,
    weight: BigNumberish,
    abstain: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: boolean,
    weight: bigint,
    abstain: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: boolean;
    weight: bigint;
    abstain: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntentFiGovernance extends BaseContract {
  connect(runner?: ContractRunner | null): IntentFiGovernance;
  waitForDeployment(): Promise<this>;

  interface: IntentFiGovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean, abstain: boolean],
    [void],
    "nonpayable"
  >;

  delegate: TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;

  delegatedVotes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  delegates: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  emergencyMultisig: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyThreshold: TypedContractMethod<[], [bigint], "view">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposalDetails: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        proposer: string;
        title: string;
        description: string;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  getUserVote: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [
      [boolean, boolean, bigint, boolean] & {
        hasVoted: boolean;
        support: boolean;
        weight: bigint;
        abstain: boolean;
      }
    ],
    "view"
  >;

  getVotingPower: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  governanceParams: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        votingDelay: bigint;
        votingPeriod: bigint;
        proposalThreshold: bigint;
        quorumThreshold: bigint;
        executionDelay: bigint;
        minExecutionDelay: bigint;
        maxExecutionDelay: bigint;
      }
    ],
    "view"
  >;

  governanceToken: TypedContractMethod<[], [string], "view">;

  nextProposalId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalExecutionTime: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        callData: string;
        target: string;
        value: bigint;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      title: string,
      description: string,
      target: AddressLike,
      value: BigNumberish,
      callData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  protocolParams: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        maxIntentDuration: bigint;
        minIntentAmount: bigint;
        protocolFeeRate: bigint;
        maxSlippageTolerance: bigint;
        emergencyPauseDuration: bigint;
        emergencyPauseEnabled: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  votingPower: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean, abstain: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegatedVotes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyMultisig"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposalDetails"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        proposer: string;
        title: string;
        description: string;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [
      [boolean, boolean, bigint, boolean] & {
        hasVoted: boolean;
        support: boolean;
        weight: bigint;
        abstain: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingPower"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceParams"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        votingDelay: bigint;
        votingPeriod: bigint;
        proposalThreshold: bigint;
        quorumThreshold: bigint;
        executionDelay: bigint;
        minExecutionDelay: bigint;
        maxExecutionDelay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalExecutionTime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        callData: string;
        target: string;
        value: bigint;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      target: AddressLike,
      value: BigNumberish,
      callData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolParams"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        maxIntentDuration: bigint;
        minIntentAmount: bigint;
        protocolFeeRate: bigint;
        maxSlippageTolerance: bigint;
        emergencyPauseDuration: bigint;
        emergencyPauseEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "EmergencyPauseToggled"
  ): TypedContractEvent<
    EmergencyPauseToggledEvent.InputTuple,
    EmergencyPauseToggledEvent.OutputTuple,
    EmergencyPauseToggledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ParameterUpdated"
  ): TypedContractEvent<
    ParameterUpdatedEvent.InputTuple,
    ParameterUpdatedEvent.OutputTuple,
    ParameterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCancelled"
  ): TypedContractEvent<
    ProposalCancelledEvent.InputTuple,
    ProposalCancelledEvent.OutputTuple,
    ProposalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "EmergencyPauseToggled(bool)": TypedContractEvent<
      EmergencyPauseToggledEvent.InputTuple,
      EmergencyPauseToggledEvent.OutputTuple,
      EmergencyPauseToggledEvent.OutputObject
    >;
    EmergencyPauseToggled: TypedContractEvent<
      EmergencyPauseToggledEvent.InputTuple,
      EmergencyPauseToggledEvent.OutputTuple,
      EmergencyPauseToggledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ParameterUpdated(string,uint256,uint256)": TypedContractEvent<
      ParameterUpdatedEvent.InputTuple,
      ParameterUpdatedEvent.OutputTuple,
      ParameterUpdatedEvent.OutputObject
    >;
    ParameterUpdated: TypedContractEvent<
      ParameterUpdatedEvent.InputTuple,
      ParameterUpdatedEvent.OutputTuple,
      ParameterUpdatedEvent.OutputObject
    >;

    "ProposalCancelled(uint256)": TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;
    ProposalCancelled: TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
