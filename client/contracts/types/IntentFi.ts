/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IntentFi {
  export type IntentStruct = {
    id: BigNumberish;
    owner: AddressLike;
    intentType: BigNumberish;
    triggerPrice: BigNumberish;
    amount: BigNumberish;
    tokenAddress: AddressLike;
    destinationChainSelector: BigNumberish;
    destinationReceiver: AddressLike;
    status: BigNumberish;
    createdAt: BigNumberish;
    lastChecked: BigNumberish;
  };

  export type IntentStructOutput = [
    id: bigint,
    owner: string,
    intentType: bigint,
    triggerPrice: bigint,
    amount: bigint,
    tokenAddress: string,
    destinationChainSelector: bigint,
    destinationReceiver: string,
    status: bigint,
    createdAt: bigint,
    lastChecked: bigint
  ] & {
    id: bigint;
    owner: string;
    intentType: bigint;
    triggerPrice: bigint;
    amount: bigint;
    tokenAddress: string;
    destinationChainSelector: bigint;
    destinationReceiver: string;
    status: bigint;
    createdAt: bigint;
    lastChecked: bigint;
  };
}

export interface IntentFiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_INTENTS_PER_CHECK"
      | "PRICE_FEED_HEARTBEAT"
      | "allowlistDestinationChain"
      | "allowlistedDestinationChains"
      | "cancelIntent"
      | "ccipRouterAddress"
      | "checkUpkeep"
      | "createIntent"
      | "executeIntent"
      | "getActiveIntents"
      | "getCurrentPrice"
      | "getIntentDetails"
      | "getUserIntents"
      | "intents"
      | "owner"
      | "performUpkeep"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCCIPRouter"
      | "updatePriceFeed"
      | "userIntents"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CrossChainMessageSent"
      | "IntentCreated"
      | "IntentExecuted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_INTENTS_PER_CHECK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_FEED_HEARTBEAT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistDestinationChain",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedDestinationChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIntent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveIntents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIntentDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIntents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "intents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCCIPRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userIntents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_INTENTS_PER_CHECK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_FEED_HEARTBEAT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistDestinationChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedDestinationChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCCIPRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace CrossChainMessageSentEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    destinationChainSelector: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    intentId: bigint,
    destinationChainSelector: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    intentId: bigint;
    destinationChainSelector: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentCreatedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    owner: AddressLike,
    intentType: BigNumberish,
    triggerPrice: BigNumberish,
    amount: BigNumberish,
    destinationChain: BigNumberish,
    destinationReceiver: AddressLike
  ];
  export type OutputTuple = [
    intentId: bigint,
    owner: string,
    intentType: bigint,
    triggerPrice: bigint,
    amount: bigint,
    destinationChain: bigint,
    destinationReceiver: string
  ];
  export interface OutputObject {
    intentId: bigint;
    owner: string;
    intentType: bigint;
    triggerPrice: bigint;
    amount: bigint;
    destinationChain: bigint;
    destinationReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentExecutedEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    destinationChainSelector: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    intentId: bigint,
    destinationChainSelector: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    intentId: bigint;
    destinationChainSelector: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntentFi extends BaseContract {
  connect(runner?: ContractRunner | null): IntentFi;
  waitForDeployment(): Promise<this>;

  interface: IntentFiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_INTENTS_PER_CHECK: TypedContractMethod<[], [bigint], "view">;

  PRICE_FEED_HEARTBEAT: TypedContractMethod<[], [bigint], "view">;

  allowlistDestinationChain: TypedContractMethod<
    [_destinationChainSelector: BigNumberish, allowed: boolean],
    [void],
    "nonpayable"
  >;

  allowlistedDestinationChains: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  cancelIntent: TypedContractMethod<
    [_intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  ccipRouterAddress: TypedContractMethod<[], [string], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  createIntent: TypedContractMethod<
    [
      _intentType: BigNumberish,
      _triggerPrice: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike,
      _destinationChainSelector: BigNumberish,
      _destinationReceiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  executeIntent: TypedContractMethod<
    [_intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveIntents: TypedContractMethod<[], [bigint[]], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getIntentDetails: TypedContractMethod<
    [_intentId: BigNumberish],
    [IntentFi.IntentStructOutput],
    "view"
  >;

  getUserIntents: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  intents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        owner: string;
        intentType: bigint;
        triggerPrice: bigint;
        amount: bigint;
        tokenAddress: string;
        destinationChainSelector: bigint;
        destinationReceiver: string;
        status: bigint;
        createdAt: bigint;
        lastChecked: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCCIPRouter: TypedContractMethod<
    [_newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceFeed: TypedContractMethod<
    [_newPriceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  userIntents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_INTENTS_PER_CHECK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_FEED_HEARTBEAT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowlistDestinationChain"
  ): TypedContractMethod<
    [_destinationChainSelector: BigNumberish, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowlistedDestinationChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelIntent"
  ): TypedContractMethod<[_intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ccipRouterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createIntent"
  ): TypedContractMethod<
    [
      _intentType: BigNumberish,
      _triggerPrice: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike,
      _destinationChainSelector: BigNumberish,
      _destinationReceiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeIntent"
  ): TypedContractMethod<[_intentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveIntents"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIntentDetails"
  ): TypedContractMethod<
    [_intentId: BigNumberish],
    [IntentFi.IntentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserIntents"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "intents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        owner: string;
        intentType: bigint;
        triggerPrice: bigint;
        amount: bigint;
        tokenAddress: string;
        destinationChainSelector: bigint;
        destinationReceiver: string;
        status: bigint;
        createdAt: bigint;
        lastChecked: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCCIPRouter"
  ): TypedContractMethod<[_newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<[_newPriceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userIntents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CrossChainMessageSent"
  ): TypedContractEvent<
    CrossChainMessageSentEvent.InputTuple,
    CrossChainMessageSentEvent.OutputTuple,
    CrossChainMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "IntentCreated"
  ): TypedContractEvent<
    IntentCreatedEvent.InputTuple,
    IntentCreatedEvent.OutputTuple,
    IntentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IntentExecuted"
  ): TypedContractEvent<
    IntentExecutedEvent.InputTuple,
    IntentExecutedEvent.OutputTuple,
    IntentExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CrossChainMessageSent(uint256,uint64,address,uint256)": TypedContractEvent<
      CrossChainMessageSentEvent.InputTuple,
      CrossChainMessageSentEvent.OutputTuple,
      CrossChainMessageSentEvent.OutputObject
    >;
    CrossChainMessageSent: TypedContractEvent<
      CrossChainMessageSentEvent.InputTuple,
      CrossChainMessageSentEvent.OutputTuple,
      CrossChainMessageSentEvent.OutputObject
    >;

    "IntentCreated(uint256,address,uint8,int256,uint256,uint64,address)": TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;
    IntentCreated: TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;

    "IntentExecuted(uint256,uint64,address,uint256)": TypedContractEvent<
      IntentExecutedEvent.InputTuple,
      IntentExecutedEvent.OutputTuple,
      IntentExecutedEvent.OutputObject
    >;
    IntentExecuted: TypedContractEvent<
      IntentExecutedEvent.InputTuple,
      IntentExecutedEvent.OutputTuple,
      IntentExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
